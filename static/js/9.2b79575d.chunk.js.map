{"version":3,"sources":["containers/MonacoEditor/Editor.js"],"names":["noop","MonacoEditor","props","_this","Object","_Users_okansahin_Documents_react_react_music_searcher_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","_Users_okansahin_Documents_react_react_music_searcher_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_okansahin_Documents_react_react_music_searcher_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","assignRef","component","containerElement","undefined","__current_value","value","initMonaco","editor","updateOptions","selectOnLineNumbers","roundedSelection","readOnly","cursorStyle","automaticLayout","prevProps","__prevent_trigger_change_event","setValue","language","monaco","setModelLanguage","getModel","theme","setTheme","destroyMonaco","dispose","defaultValue","_this$props","options","assign","editorWillMount","create","_Users_okansahin_Documents_react_react_music_searcher_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","editorDidMount","_this2","onDidChangeModelContent","event","getValue","onChange","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","style","paddingTop","onClick","changeEditorValue","type","changeBySetState","ref","height","width","className","React","Component","defaultProps"],"mappings":"8KAQA,SAASA,SAEHC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KA2CRQ,UAAY,SAAAC,GACVR,EAAKS,iBAAmBD,GA3CxBR,EAAKS,sBAAmBC,EACxBV,EAAKW,gBAAkBZ,EAAMa,MAHZZ,mFAOjBG,KAAKU,aAELV,KAAKW,OAAOC,cAAc,CACxBC,qBAAqB,EACrBC,kBAAkB,EAClBC,UAAU,EACVC,YAAa,OACbC,iBAAiB,+CAIFC,GACblB,KAAKJ,MAAMa,QAAUT,KAAKQ,kBAE5BR,KAAKQ,gBAAkBR,KAAKJ,MAAMa,MAE9BT,KAAKW,SACPX,KAAKmB,gCAAiC,EACtCnB,KAAKW,OAAOS,SAASpB,KAAKQ,iBAC1BR,KAAKmB,gCAAiC,IAGtCD,EAAUG,WAAarB,KAAKJ,MAAMyB,UACpCC,SAAcC,iBACZvB,KAAKW,OAAOa,WACZxB,KAAKJ,MAAMyB,UAGXH,EAAUO,QAAUzB,KAAKJ,MAAM6B,OACjCH,SAAcI,SAAS1B,KAAKJ,MAAM6B,sDAKpCzB,KAAK2B,wDAQsB,qBAAhB3B,KAAKW,QACdX,KAAKW,OAAOiB,+CAKd,IAAMnB,EACiB,OAArBT,KAAKJ,MAAMa,MAAiBT,KAAKJ,MAAMa,MAAQT,KAAKJ,MAAMiC,aAFjDC,EAG0B9B,KAAKJ,MAAlCyB,EAHGS,EAGHT,SAAUI,EAHPK,EAGOL,MAAOM,EAHdD,EAGcC,QACrB/B,KAAKM,mBAEPR,OAAOkC,OAAOD,EAAS/B,KAAKiC,mBAC5BjC,KAAKW,OAASW,SAAcY,OAAOlC,KAAKM,iBAA1BR,OAAAqC,EAAA,EAAArC,CAAA,CACZW,QACAY,YACGU,IAEDN,GACFH,SAAcI,SAASD,GAGzBzB,KAAKoC,eAAepC,KAAKW,mDAIX,IACRsB,EAAoBjC,KAAKJ,MAAzBqC,gBAER,OADgBA,EAAgBX,IACd,0CAGLX,GAAQ,IAAA0B,EAAArC,KACrBA,KAAKJ,MAAMwC,eAAezB,EAAQW,GAClCX,EAAO2B,wBAAwB,SAAAC,GAC7B,IAAM9B,EAAQE,EAAO6B,WAGrBH,EAAK7B,gBAAkBC,EAGlB4B,EAAKlB,gCACRkB,EAAKzC,MAAM6C,SAAShC,EAAO8B,sCAM/B,OACEG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,WAAY,SACxBJ,EAAAC,EAAAC,cAAA,UAAQG,QAAS/C,KAAKgD,kBAAmBC,KAAK,UAA9C,gBAGAP,EAAAC,EAAAC,cAAA,UAAQG,QAAS/C,KAAKkD,iBAAkBD,KAAK,UAA7C,uBAIFP,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,OACEO,IAAKnD,KAAKI,UACVyC,MAAO,CAAEO,OAAQ,QAASC,MAAO,SACjCC,UAAU,0CAhHOC,IAAMC,WAkIjC7D,EAAa8D,aAAe,CAC1BJ,MAAO,OACPD,OAAQ,OACR3C,MAAO,KACPoB,aAAc,GACdR,SAAU,aACVI,MAAO,KACPM,QAAS,GACTK,eAAgB1C,EAChBuC,gBAAiBvC,EACjB+C,SAAU/C,GAGGC","file":"static/js/9.2b79575d.chunk.js","sourcesContent":["// https://github.com/react-monaco-editor/react-monaco-editor/blob/master/example/index.js\n// https://github.com/react-monaco-editor/react-monaco-editor/blob/master/src/utils/process-size.js\n// props to the package above\n\nimport * as monaco from 'monaco-editor/esm/vs/editor/editor.api';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nfunction noop() {}\n\nclass MonacoEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.containerElement = undefined;\n    this.__current_value = props.value;\n  }\n\n  componentDidMount() {\n    this.initMonaco();\n\n    this.editor.updateOptions({\n      selectOnLineNumbers: true,\n      roundedSelection: false,\n      readOnly: false,\n      cursorStyle: 'line',\n      automaticLayout: false,\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.value !== this.__current_value) {\n      // Always refer to the latest value\n      this.__current_value = this.props.value;\n      // Consider the situation of rendering 1+ times before the editor mounted\n      if (this.editor) {\n        this.__prevent_trigger_change_event = true;\n        this.editor.setValue(this.__current_value);\n        this.__prevent_trigger_change_event = false;\n      }\n    }\n    if (prevProps.language !== this.props.language) {\n      monaco.editor.setModelLanguage(\n        this.editor.getModel(),\n        this.props.language\n      );\n    }\n    if (prevProps.theme !== this.props.theme) {\n      monaco.editor.setTheme(this.props.theme);\n    }\n  }\n\n  componentWillUnmount() {\n    this.destroyMonaco();\n  }\n\n  assignRef = component => {\n    this.containerElement = component;\n  };\n\n  destroyMonaco() {\n    if (typeof this.editor !== 'undefined') {\n      this.editor.dispose();\n    }\n  }\n\n  initMonaco() {\n    const value =\n      this.props.value !== null ? this.props.value : this.props.defaultValue;\n    const { language, theme, options } = this.props;\n    if (this.containerElement) {\n      // Before initializing monaco editor\n      Object.assign(options, this.editorWillMount());\n      this.editor = monaco.editor.create(this.containerElement, {\n        value,\n        language,\n        ...options,\n      });\n      if (theme) {\n        monaco.editor.setTheme(theme);\n      }\n      // After initializing monaco editor\n      this.editorDidMount(this.editor);\n    }\n  }\n\n  editorWillMount() {\n    const { editorWillMount } = this.props;\n    const options = editorWillMount(monaco);\n    return options || {};\n  }\n\n  editorDidMount(editor) {\n    this.props.editorDidMount(editor, monaco);\n    editor.onDidChangeModelContent(event => {\n      const value = editor.getValue();\n\n      // Always refer to the latest value\n      this.__current_value = value;\n\n      // Only invoking when user input changed\n      if (!this.__prevent_trigger_change_event) {\n        this.props.onChange(value, event);\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div style={{ paddingTop: '10px' }}>\n          <button onClick={this.changeEditorValue} type=\"button\">\n            Change value\n          </button>\n          <button onClick={this.changeBySetState} type=\"button\">\n            Change by setState\n          </button>\n        </div>\n        <hr />\n\n        <div\n          ref={this.assignRef}\n          style={{ height: '500px', width: '800px' }}\n          className=\"react-monaco-editor-container\"\n        />\n      </div>\n    );\n  }\n}\n\nMonacoEditor.propTypes = {\n  value: PropTypes.string,\n  defaultValue: PropTypes.string,\n  language: PropTypes.string,\n  theme: PropTypes.string,\n  options: PropTypes.object,\n  editorDidMount: PropTypes.func,\n  editorWillMount: PropTypes.func,\n  onChange: PropTypes.func,\n};\n\nMonacoEditor.defaultProps = {\n  width: '100%',\n  height: '100%',\n  value: null,\n  defaultValue: '',\n  language: 'javascript',\n  theme: null,\n  options: {},\n  editorDidMount: noop,\n  editorWillMount: noop,\n  onChange: noop,\n};\n\nexport default MonacoEditor;\n"],"sourceRoot":""}