{"version":3,"sources":["containers/MonacoEditor/Editor.js","containers/MonacoEditor/initialCodeValue.js","containers/MonacoEditor/index.js"],"names":["MonacoEditor","assignRef","component","_this","containerElement","this","initMonaco","destroyMonaco","editor","dispose","options","selectOnLineNumbers","roundedSelection","readOnly","cursorStyle","automaticLayout","language","value","Object","assign","monaco","create","objectSpread","setTheme","editorDidMount","console","log","react_default","a","createElement","ref","style","height","React","Component","withStyles","theme","Paper","_ref","classes","Paper_default","className","Editor"],"mappings":"wMA6DeA,6MA3CbC,UAAY,SAAAC,GACVC,EAAKC,iBAAmBF,sFARxBG,KAAKC,4DAILD,KAAKE,wDAQsB,qBAAhBF,KAAKG,QACdH,KAAKG,OAAOC,+CAKd,IAAMC,EAAU,CACdC,qBAAqB,EACrBC,kBAAkB,EAClBC,UAAU,EACVC,YAAa,OACbC,iBAAiB,EACjBC,SAAU,aACVC,MCnCK,64BDsCHZ,KAAKD,mBAEPc,OAAOC,OAAOT,GACdL,KAAKG,OAASY,SAAcC,OAAOhB,KAAKD,iBAA1Bc,OAAAI,EAAA,EAAAJ,CAAA,GACTR,IAELU,SAAcG,SAAS,YAGvBlB,KAAKmB,eAAenB,KAAKG,kDAK3BiB,QAAQC,IAAI,4CAIZ,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,IAAKzB,KAAKJ,UAAW8B,MAAO,CAAEC,OAAQ,mBAhD3BC,IAAMC,WEYlBC,+BAdA,SAAAC,GAAK,MAAK,CACvBC,MAAO,KAaMF,CAVA,SAAAG,GAAA,IAAGC,EAAHD,EAAGC,QAAH,OACbZ,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CAAOa,UAAWF,EAAQF,OACxBV,EAAAC,EAAAC,cAACa,EAAD","file":"static/js/11.f1d42c61.chunk.js","sourcesContent":["// Minimalistic monaco editor setup.\n\n// A very nice lib\n// that inspired me: https://github.com/react-monaco-editor/react-monaco-editor\n\nimport * as monaco from 'monaco-editor/esm/vs/editor/editor.api';\nimport React from 'react';\nimport value from './initialCodeValue';\n\nclass MonacoEditor extends React.Component {\n  componentDidMount() {\n    this.initMonaco();\n  }\n\n  componentWillUnmount() {\n    this.destroyMonaco();\n  }\n\n  assignRef = component => {\n    this.containerElement = component;\n  };\n\n  destroyMonaco() {\n    if (typeof this.editor !== 'undefined') {\n      this.editor.dispose();\n    }\n  }\n\n  initMonaco() {\n    const options = {\n      selectOnLineNumbers: true,\n      roundedSelection: false,\n      readOnly: false,\n      cursorStyle: 'line',\n      automaticLayout: true,\n      language: 'javascript',\n      value,\n    };\n\n    if (this.containerElement) {\n      // Before initializing monaco editor\n      Object.assign(options);\n      this.editor = monaco.editor.create(this.containerElement, {\n        ...options,\n      });\n      monaco.editor.setTheme('vs-light');\n\n      // After initializing monaco editor\n      this.editorDidMount(this.editor);\n    }\n  }\n\n  editorDidMount() {\n    console.log('mounted');\n  }\n\n  render() {\n    return <div ref={this.assignRef} style={{ height: '91.3vh' }} />;\n  }\n}\n\nexport default MonacoEditor;\n","// no one can nicely read the code with this blob blocking Editor.js, so this lives as its own file\nconst value = `// minimal microsoft's \"monaco editor\" (vscode) implementation\n\n// _______________  DEMO CONTENT _______________ \n\n// Automatically re-try to fetch Data with the fetchRetry helper\nconst fn = async () =>  {\n  const res = await fetchRetry(5);\n  console.log(res);\n}\n\n/**\n * @async\n * @param {Number} n amount of times the function will retry to make a async call\n */\nexport const fetchRetry = async n => {\n  try {\n    // new Promise = fetch\n    return await new Promise((resolve, reject) => {\n      if (n > 0) {\n        window.setTimeout(() => {\n          reject();\n          console.log(\"try: \" + n);\n        }, Math.random() * 2000);\n      } else {\n        window.setTimeout(() => {\n          resolve('resolved');\n        }, Math.random() * 2000);\n      }\n    });\n  } catch (err) {\n    return fetchRetry(n - 1);\n  }\n};\n\n// _______________  DEMO CONTENT _______________ `;\n\nexport default value;\n","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Editor from './Editor';\n\n// styles not needed right now, but potentially in future.\nconst styles = theme => ({\n  Paper: {},\n});\n\nconst editor = ({ classes }) => (\n  <Paper className={classes.Paper}>\n    <Editor />\n  </Paper>\n);\n\neditor.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(editor);\n"],"sourceRoot":""}